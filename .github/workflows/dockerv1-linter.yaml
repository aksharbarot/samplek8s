name: Docker Lint & Trivy Scan

on:
  push:
    paths:
      - '**/Dockerfile*'
  pull_request:
    paths:
      - '**/Dockerfile*'
  workflow_dispatch:

jobs:
  docker-lint:
    runs-on: ubuntu-latest

    outputs:
      image_list: ${{ steps.set-images.outputs.image_list }}
      fail_code: ${{ steps.scan.outputs.fail_code }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Prepare reports folder
        run: mkdir -p reports

      - name: Install hadolint
        run: |
          wget -O /usr/local/bin/hadolint https://github.com/hadolint/hadolint/releases/latest/download/hadolint-Linux-x86_64
          chmod +x /usr/local/bin/hadolint

      - name: Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin

      - name: Lint, Build, and collect images
        id: scan
        run: |
          set -e
          FAIL=0
          mkdir -p reports
          > reports/images_to_scan.txt

          for file in $(find . -type f -name 'Dockerfile*' ! -path "./reports/*"); do
            echo "▶️ Found Dockerfile: $file"
            base=$(basename "$file")
            image_tag="localscan-${base,,}"
            docker_context=$(dirname "$file")

            echo "🔍 Linting $file"
            hadolint "$file" --ignore DL3018 > "reports/${base}_hadolint.txt" || true
            HADO_ISSUES=$(grep -c '.' "reports/${base}_hadolint.txt" || echo 0)

            echo "🐳 Building image: $image_tag"
            if docker build -f "$file" -t "$image_tag" "$docker_context" > "reports/${base}_build.txt" 2>&1; then
              echo "$image_tag" >> reports/images_to_scan.txt
            else
              echo "❌ Build failed for $file"
              cat "reports/${base}_build.txt"
              FAIL=1
              continue
            fi

            if [ "$HADO_ISSUES" -gt 0 ]; then
              echo "❌ Lint issues found in $file"
              FAIL=1
            fi
          done

          echo "fail_code=$FAIL" >> $GITHUB_OUTPUT

      - name: Load image names into env var
        id: set-images
        run: |
          if [[ -s reports/images_to_scan.txt ]]; then
            IMAGE_LIST=$(paste -sd ' ' reports/images_to_scan.txt)
            echo "IMAGE_LIST=$IMAGE_LIST" >> $GITHUB_ENV
            echo "image_list=$IMAGE_LIST" >> $GITHUB_OUTPUT
          else
            echo "⚠️ No images to scan"
            echo "IMAGE_LIST=" >> $GITHUB_ENV
            echo "image_list=" >> $GITHUB_OUTPUT
          fi

      - name: Upload reports
        uses: actions/upload-artifact@v4
        with:
          name: docker-lint-reports
          path: reports

      - name: Fail if lint or build errors found
        if: steps.scan.outputs.fail_code == '1'
        run: |
          echo "❌ Lint or build errors detected"
          exit 1

  trivy-scan:
    needs: docker-lint
    runs-on: ubuntu-latest
    if: ${{ needs.docker-lint.outputs.image_list != '' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin

      - name: Restore image list
        run: echo "IMAGE_LIST=${{ needs.docker-lint.outputs.image_list }}" >> $GITHUB_ENV

      - name: Debug built images
        run: docker images

      - name: Fail early if no images built
        run: |
          if [ -z "${{ env.IMAGE_LIST }}" ]; then
            echo "❌ No Docker images built. Failing Trivy scan."
            exit 1
          fi

      - name: Scan images with Trivy (JSON)
        run: |
          set -e
          mkdir -p reports
          for image in $IMAGE_LIST; do
            echo "🔍 Scanning $image"
            trivy image --format json --ignore-unfixed --severity CRITICAL,HIGH,MEDIUM "$image" > "reports/trivy_${image}.json"
          done
          jq -s '.' reports/trivy_*.json > reports/trivy_combined.json

      - name: Annotate PR with Trivy vulnerabilities
        run: |
          COUNT=$(jq '[.[] | .Vulnerabilities[]? | select(.Severity == "CRITICAL" or .Severity == "HIGH" or .Severity == "MEDIUM")] | length' reports/trivy_combined.json)
          echo "🧪 Found $COUNT critical/high/medium vulnerabilities"
          if [ "$COUNT" -gt 0 ]; then
            jq -c '.[] | .Vulnerabilities[]? | select(.Severity == "CRITICAL" or .Severity == "HIGH" or .Severity == "MEDIUM")' reports/trivy_combined.json | while read -r vuln; do
              ID=$(echo "$vuln" | jq -r .VulnerabilityID)
              PKG=$(echo "$vuln" | jq -r .PkgName)
              SEVERITY=$(echo "$vuln" | jq -r .Severity)
              echo "::warning title=Trivy $SEVERITY::$ID found in $PKG"
            done
            exit 1
          else
            echo "✅ No critical/high/medium vulnerabilities"
          fi

      - name: Upload Trivy report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: reports/trivy_combined.json

# .github/workflows/docker-lint-and-trivy.yaml
name: Docker Lint & Trivy Scan

on:
  push:
    paths:
      - '**/Dockerfile*'
  pull_request:
    paths:
      - '**/Dockerfile*'
  workflow_dispatch:

jobs:
  lint-and-build:
    runs-on: ubuntu-latest
    outputs:
      lint_failed: ${{ steps.scan.outputs.fail_code }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare reports dir
        run: mkdir -p reports

      - name: Install Hadolint
        run: |
          wget -O /usr/local/bin/hadolint \
            https://github.com/hadolint/hadolint/releases/latest/download/hadolint-Linux-x86_64
          chmod +x /usr/local/bin/hadolint

      - name: Lint & Build Dockerfiles
        id: scan
        run: |
          set -e
          FAIL=0
          > image_list.txt

          for file in $(find . -type f -name 'Dockerfile*' ! -path "./reports/*"); do
            base=$(basename "$file")
            tag="localscan-${base,,}"
            ctx=$(dirname "$file")

            echo "üîç Linting $file"
            hadolint "$file" --ignore DL3018 > "reports/${base}_lint.txt" || true
            if [ -s "reports/${base}_lint.txt" ]; then
              echo "‚ùå Hadolint found issues in $file"
              FAIL=1
            fi

            echo "üê≥ Building $file ‚Üí $tag"
            if docker build -f "$file" -t "$tag" "$ctx" \
               > "reports/${base}_build.txt" 2>&1; then
              echo "$file" >> image_list.txt
            else
              echo "‚ùå Build failed for $file"
              cat "reports/${base}_build.txt"
              FAIL=1
            fi
          done

          echo "fail_code=$FAIL" >> $GITHUB_OUTPUT

      - name: Upload lint + build reports
        uses: actions/upload-artifact@v4
        with:
          name: docker-reports
          path: reports/

      - name: Upload image list
        uses: actions/upload-artifact@v4
        with:
          name: image-list
          path: image_list.txt

      - name: Fail if lint or build errors
        if: ${{ steps.scan.outputs.fail_code == '1' }}
        run: exit 1

  trivy-scan:
    runs-on: ubuntu-latest
    needs: lint-and-build

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh \
            | sh -s -- -b /usr/local/bin

      - name: Download image list
        uses: actions/download-artifact@v4
        with:
          name: image-list
          path: image-list

      - name: Rebuild & collect tags
        run: |
          mkdir -p image-list
          > image-list/image_tags.txt

          if [[ ! -s image-list/image_list.txt ]]; then
            echo "‚ùå No Dockerfiles to scan"
            exit 1
          fi

          while read -r file; do
            base=$(basename "$file")
            tag="localscan-${base,,}"
            ctx=$(dirname "$file")
            echo "üê≥ Rebuilding $file ‚Üí $tag"
            docker build -f "$file" -t "$tag" "$ctx"
            echo "$tag" >> image-list/image_tags.txt
          done < image-list/image_list.txt

      - name: Run Trivy on each image
        run: |
          mkdir -p reports
          > reports/trivy_warnings.log

          while read -r img; do
            out="reports/${img//\//_}.json"
            echo "üîç Scanning $img ‚Üí $out"
            trivy image \
              --severity CRITICAL,HIGH,MEDIUM \
              --ignore-unfixed \
              --exit-code 1 \
              --format json \
              "$img" \
              > "$out" 2>> reports/trivy_warnings.log || true

            # ensure valid JSON even if Trivy emitted no JSON
            if [ ! -s "$out" ] || ! head -c1 "$out" | grep -q '{'; then
              echo '{"Results":[]}' > "$out"
            fi
          done < image-list/image_tags.txt

      - name: Warn if unsupported OS warnings showed up
        run: |
          if grep -q "no longer supported by the distribution" reports/trivy_warnings.log; then
            echo "‚ö†Ô∏è  Trivy emitted unsupported-OS warnings, but we'll continue"
          else
            echo "‚úÖ No unsupported-OS warnings"
          fi

      - name: Convert Trivy JSON to annotation format
        if: github.event_name == 'pull_request'
        run: |
          jq -s '[ .[].Results[]? .Vulnerabilities[]?
                    | {
                        file:    "Dockerfile",
                        line:    1,
                        level:   (if .Severity=="CRITICAL" then "failure"
                                  elif .Severity=="HIGH"    then "warning"
                                  else "notice" end),
                        message: "\(.VulnerabilityID) in \(.PkgName) ‚Äì \(.PrimaryURL)"
                      }
                  ]' reports/*.json > reports/annotations.json

      - name: Annotate PR with Trivy issues
        if: github.event_name == 'pull_request'
        uses: yuzutech/annotations-action@v0.5.0
        with:
          repo-token: "${{ secrets.TOKEN }}"
          title: 'Trivy Scan Results'
          input: './reports/annotations.json'

      - name: Inline Trivy warnings (non-PR fallback)
        if: github.event_name != 'pull_request'
        run: |
          for file in reports/*.json; do
            jq -c '.Results[]? .Vulnerabilities[]?' "$file" 2>/dev/null \
            | while read -r v; do
                ID=$(echo "$v" | jq -r .VulnerabilityID)
                PKG=$(echo "$v" | jq -r .PkgName)
                SEV=$(echo "$v" | jq -r .Severity)
                URL=$(echo "$v" | jq -r .PrimaryURL)
                echo "::warning file=Dockerfile,line=1,title=Trivy::$ID in $PKG ‚Äì Severity: $SEV ‚Äì $URL"
              done
          done

      - name: Aggregate, report per-severity & fail on CVEs
        run: |
          total_crit=0
          total_high=0
          total_med=0

          for file in reports/*.json; do
            crit=$(jq '[.Results[]? .Vulnerabilities[]? | select(.Severity=="CRITICAL")] | length' "$file")
            high=$(jq '[.Results[]? .Vulnerabilities[]? | select(.Severity=="HIGH")] | length' "$file")
            med=$(jq '[.Results[]? .Vulnerabilities[]? | select(.Severity=="MEDIUM")] | length' "$file")

            total_crit=$(( total_crit + crit ))
            total_high=$(( total_high + high ))
            total_med=$(( total_med + med ))
          done

          echo "üß™ Vulnerability summary:"
          echo "    CRITICAL: $total_crit"
          echo "    HIGH:     $total_high"
          echo "    MEDIUM:   $total_med"

          total=$(( total_crit + total_high + total_med ))
          if [ "$total" -gt 0 ]; then
            echo "‚ùå Failing because $total total CRITICAL/HIGH/MEDIUM vulnerabilities were found"
            exit 1
          else
            echo "‚úÖ No CRITICAL/HIGH/MEDIUM vulnerabilities"
          fi

      - name: Upload Trivy reports
        uses: actions/upload-artifact@v4
        with:
          name: trivy-reports
          path: reports/

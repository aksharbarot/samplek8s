name: Docker Lint & Trivy Scan

on:
  push:
    paths:
      - '**/Dockerfile*'
  pull_request:
    paths:
      - '**/Dockerfile*'
  workflow_dispatch:

jobs:
  lint-and-build:
    runs-on: ubuntu-latest

    outputs:
      lint_failed: ${{ steps.scan.outputs.fail_code }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup
        run: mkdir -p reports

      - name: Install Hadolint
        run: |
          wget -O /usr/local/bin/hadolint https://github.com/hadolint/hadolint/releases/latest/download/hadolint-Linux-x86_64
          chmod +x /usr/local/bin/hadolint

      - name: Lint and Build Dockerfiles
        id: scan
        run: |
          set -e
          FAIL=0
          > image_list.txt

          for file in $(find . -type f -name 'Dockerfile*' ! -path "./reports/*"); do
            echo "‚ñ∂Ô∏è Found Dockerfile: $file"
            base=$(basename "$file")
            image_tag="localscan-${base,,}"
            context_dir=$(dirname "$file")

            echo "üîç Linting $file"
            hadolint "$file" --ignore DL3018 > "reports/${base}_hadolint.txt" || true
            if grep -q . "reports/${base}_hadolint.txt"; then
              echo "‚ùå Lint issues in $file"
              FAIL=1
            fi

            echo "üê≥ Building image: $image_tag"
            if docker build -f "$file" -t "$image_tag" "$context_dir" > "reports/${base}_build.txt" 2>&1; then
              echo "$file" >> image_list.txt
            else
              echo "‚ùå Build failed for $file"
              cat "reports/${base}_build.txt"
              FAIL=1
            fi
          done

          echo "fail_code=$FAIL" >> $GITHUB_OUTPUT

      - name: Upload lint/build reports
        uses: actions/upload-artifact@v4
        with:
          name: docker-reports
          path: reports/

      - name: Upload image list
        uses: actions/upload-artifact@v4
        with:
          name: image-list
          path: image_list.txt

      - name: Fail if lint or build errors found
        if: steps.scan.outputs.fail_code == '1'
        run: |
          echo "‚ùå Lint or build errors detected"
          exit 1

  trivy-scan:
    runs-on: ubuntu-latest
    needs: lint-and-build

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin

      - name: Download image list
        uses: actions/download-artifact@v4
        with:
          name: image-list
          path: image-list

      - name: Rebuild Docker images
        run: |
          mkdir -p image-list
          > image-list/image_tags.txt
          if [[ ! -s image-list/image_list.txt ]]; then
            echo "‚ùå No Dockerfiles were listed from lint job. Cannot scan."
            exit 1
          fi

          while read -r file; do
            base=$(basename "$file")
            image_tag="localscan-${base,,}"
            context_dir=$(dirname "$file")
            echo "üê≥ Rebuilding image $image_tag from $file"
            if docker build -f "$file" -t "$image_tag" "$context_dir"; then
              echo "$image_tag" >> image-list/image_tags.txt
            else
              echo "‚ùå Build failed for $file"
              exit 1
            fi
          done < image-list/image_list.txt

      - name: Debug image list
        run: |
          echo "Contents of image_tags.txt:"
          cat image-list/image_tags.txt || echo "(file missing or empty)"

      - name: Run Trivy Scan
        run: |
          mkdir -p reports
          > reports/trivy_logs.txt
          while read -r image; do
            echo "üîç Scanning image: $image"
            trivy image --format json --ignore-unfixed --severity CRITICAL,HIGH,MEDIUM "$image" > "reports/trivy_${image}.json" 2>> reports/trivy_logs.txt
          done < image-list/image_tags.txt
          jq -s '.' reports/trivy_*.json > reports/trivy_combined.json

      - name: Convert Trivy JSON to annotation format
        run: |
          jq -n '[inputs[] | select(.Vulnerabilities) | .Vulnerabilities[]? |
            {
              file: "Dockerfile",
              line: 1,
              level: (if .Severity == "CRITICAL" then "failure" elif .Severity == "HIGH" then "warning" else "notice" end),
              message: (.VulnerabilityID + " in " + .PkgName + " ‚Äì " + .PrimaryURL)
            }]' reports/trivy_combined.json > reports/annotations.json

      - name: Annotate PR with Trivy issues using annotate-action
        if: github.event_name == 'pull_request'
        uses: yuzutech/annotations-action@v0.5.0
        with:
          repo-token: "${{ secrets.TOKEN }}"
          title: 'Trivy Scan Results'
          input: './reports/annotations.json'

      - name: Inline Trivy warnings (non-PR fallback)
        if: github.event_name != 'pull_request'
        run: |
          jq -c '.[] | select(.Vulnerabilities) | .Vulnerabilities[]' reports/trivy_combined.json | while read -r vuln; do
            ID=$(echo "$vuln" | jq -r .VulnerabilityID)
            PACKAGE=$(echo "$vuln" | jq -r .PkgName)
            SEVERITY=$(echo "$vuln" | jq -r .Severity)
            URL=$(echo "$vuln" | jq -r .PrimaryURL)
            echo "::warning file=Dockerfile,line=1,title=Trivy::$ID in $PACKAGE ‚Äì Severity: $SEVERITY ‚Äì $URL"
          done

      - name: Fail if vulnerabilities found
        run: |
          COUNT=$(jq '[.[] | .Vulnerabilities[]? | select(.Severity == "CRITICAL" or .Severity == "HIGH" or .Severity == "MEDIUM")] | length' reports/trivy_combined.json)
          echo "üß™ Found $COUNT vulnerabilities"
          if [ "$COUNT" -gt 0 ]; then
            echo "‚ùå Vulnerabilities found"
            exit 1
          else
            echo "‚úÖ No critical/high/medium vulnerabilities"
          fi

      - name: Fail if unsupported OS warning detected
        run: |
          if grep -q "no longer supported by the distribution" reports/trivy_logs.txt; then
            echo "‚ùå Unsupported OS detected in Trivy scan"
            exit 1
          else
            echo "‚úÖ No unsupported OS detected"
          fi
